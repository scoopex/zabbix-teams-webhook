<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>4.4</version>
    <date>2020-03-02T10:14:36Z</date>
    <media_types>
        <media_type>
            <name>Microsoft Teams</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>eventID</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>eventValue</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>eventUpdateStatus</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>eventSeverity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>eventNseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>eventDate</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>eventTime</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>triggerID</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>triggerName</name>
                    <value>{TRIGGER.NAME}</value>
                </parameter>
                <parameter>
                    <name>hostName</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>teamsURL</name>
                    <value>== PUT YOUR TEAMS CHANNEL WEBHOOK HERE ==</value>
                </parameter>
                <parameter>
                    <name>zabbixURL</name>
                    <value>== PUT YOUR ZABBIX URL HERE INCLUDING HTTPS:// AND TRAILING /</value>
                </parameter>
                <parameter>
                    <name>itemID</name>
                    <value>{ITEM.ID}</value>
                </parameter>
            </parameters>
            <script>var SEVERITY_COLORS = [&#13;
    &quot;#97AAB3&quot;, // Not classified.&#13;
    &quot;#7499FF&quot;, // Information.&#13;
    &quot;#FFC859&quot;, // Warning.&#13;
    &quot;#FFA059&quot;, // Average.&#13;
    &quot;#E97659&quot;, // High.&#13;
    &quot;#E45959&quot;, // Disaster.&#13;
    &quot;#00ff00&quot;  // Resolved.&#13;
];&#13;
&#13;
var EVENT_STATUS = {&#13;
    PROBLEM: &quot;PROBLEM&quot;,&#13;
    RESOLVED: &quot;OK&quot;&#13;
};&#13;
&#13;
var params = JSON.parse(value),&#13;
    req = new CurlHttpRequest(),&#13;
    fields = {}&#13;
    ;&#13;
&#13;
function isEventProblem(params) {&#13;
    return params.eventValue == 1 &amp;&amp; params.eventUpdateStatus == 0;	&#13;
}&#13;
&#13;
function isEventResolve(params) {&#13;
	return params.eventValue == 0;&#13;
}&#13;
&#13;
function createProblemURL(zabbixURL, triggerID, eventID) {&#13;
    return zabbixURL.replace(/\/+$/, &quot;&quot;) +&#13;
    &quot;/tr_events.php?triggerid=&quot; + triggerID +&#13;
    &quot;&amp;eventid=&quot; + eventID;&#13;
}&#13;
&#13;
function createGraphURL(zabbixURL, itemID) {&#13;
    return zabbixURL.replace(/\/+$/, &quot;&quot;) + &#13;
    &quot;/chart.php?itemids=&quot; + itemID;&#13;
}&#13;
&#13;
function createPayload(&#13;
    eventStatus,&#13;
    eventSeverityColor,&#13;
    eventSeverity,&#13;
    eventDate,&#13;
    eventTime,&#13;
    triggerName,&#13;
    hostName,&#13;
    hostIP,&#13;
    problemURL,&#13;
    graphURL&#13;
    ) {&#13;
    var payload = {&#13;
        &quot;@context&quot;: &quot;http://schema.org/extensions&quot;,&#13;
        &quot;@type&quot;: &quot;MessageCard&quot;,&#13;
        &quot;title&quot;: eventStatus + &quot;: &quot; + triggerName,&#13;
        &quot;summary&quot;: &quot;Zabbix notification&quot;,&#13;
        &quot;themeColor&quot;: eventSeverityColor,&#13;
        &quot;sections&quot;: [{&#13;
            &quot;facts&quot;: []&#13;
        }],&#13;
        &quot;potentialAction&quot;: [&#13;
            {&#13;
                &quot;@type&quot;: &quot;OpenUri&quot;,&#13;
                &quot;name&quot;: &quot;View event&quot;,&#13;
                &quot;targets&quot;: [&#13;
                    {&#13;
                        &quot;os&quot;: &quot;default&quot;,&#13;
                        &quot;uri&quot;: problemURL&#13;
                    }&#13;
                ]&#13;
            },&#13;
            {&#13;
                &quot;@type&quot;: &quot;OpenUri&quot;,&#13;
                &quot;name&quot;: &quot;View graph&quot;,&#13;
                &quot;targets&quot;: [&#13;
                    {&#13;
                        &quot;os&quot;: &quot;default&quot;,&#13;
                        &quot;uri&quot;: graphURL&#13;
                    }&#13;
                ]&#13;
            }&#13;
        ]&#13;
    };&#13;
    if (hostName) {&#13;
        payload.sections[0].facts.push({&#13;
            &quot;name&quot;: &quot;Host&quot;,&#13;
            &quot;value&quot;: hostName&#13;
        });&#13;
    }&#13;
    if (hostIP) {&#13;
        payload.sections[0].facts.push({&#13;
            &quot;name&quot;: &quot;IP&quot;,&#13;
            &quot;value&quot;: hostIP&#13;
        });&#13;
    }&#13;
    if (eventSeverity) {&#13;
        payload.sections[0].facts.push({&#13;
            &quot;name&quot;: &quot;Severity&quot;,&#13;
            &quot;value&quot;: eventSeverity&#13;
        });&#13;
    }&#13;
    if (eventDate &amp;&amp; eventTime) {&#13;
        payload.sections[0].facts.push({&#13;
            &quot;name&quot;: &quot;Event time&quot;,&#13;
            &quot;value&quot;: eventDate + &quot; &quot; + eventTime&#13;
        });&#13;
    }&#13;
    return payload;&#13;
}&#13;
&#13;
try {&#13;
    req.AddHeader(&quot;Content-Type: application/json; charset=utf-8&quot;);&#13;
    if (isEventProblem(params)) {&#13;
        fields = createPayload(&#13;
                EVENT_STATUS.PROBLEM,&#13;
                SEVERITY_COLORS[params.eventNseverity] || SEVERITY_COLORS[0],&#13;
                params.eventSeverity,&#13;
                params.eventDate,&#13;
                params.eventTime,&#13;
                params.triggerName,&#13;
                params.hostName,&#13;
                params.hostIP,&#13;
                createProblemURL(params.zabbixURL, params.triggerID, params.eventID),&#13;
                createGraphURL(params.zabbixURL, params.itemID)&#13;
            );    &#13;
    } else if (isEventResolve(params)) {&#13;
        fields = createPayload(&#13;
                EVENT_STATUS.RESOLVED,&#13;
                SEVERITY_COLORS[6],&#13;
                params.eventSeverity,&#13;
                params.eventDate,&#13;
                params.eventTime,&#13;
                params.triggerName,&#13;
                params.hostName,&#13;
                params.hostIP,&#13;
                createProblemURL(params.zabbixURL, params.triggerID, params.eventID),&#13;
                createGraphURL(params.zabbixURL, params.itemID)&#13;
            );&#13;
    }&#13;
    var resp = req.Post(params.teamsURL, JSON.stringify(fields));&#13;
        if (req.Status() != 200) {&#13;
            throw JSON.parse(resp).message; &#13;
        }&#13;
        resp = JSON.parse(resp);&#13;
    return JSON.stringify(fields);&#13;
} catch (error) {&#13;
    throw error;&#13;
}</script>
            <show_event_menu>NO</show_event_menu>
            <timeout>5s</timeout>
        </media_type>
    </media_types>
</zabbix_export>
